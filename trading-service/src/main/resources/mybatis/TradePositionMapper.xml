<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.google.backend.trading.dao.mapper.TradePositionMapper">
  <resultMap id="BaseResultMap" type="com.google.backend.trading.dao.model.TradePosition">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="symbol" jdbcType="VARCHAR" property="symbol" />
    <result column="direction" jdbcType="VARCHAR" property="direction" />
    <result column="quantity" jdbcType="NUMERIC" property="quantity" />
    <result column="price" jdbcType="NUMERIC" property="price" />
    <result column="auto_settle" jdbcType="BIT" property="autoSettle" />
    <result column="stop_loss_price" jdbcType="NUMERIC" property="stopLossPrice" />
    <result column="stop_loss_percentage" jdbcType="NUMERIC" property="stopLossPercentage" />
    <result column="take_profit_price" jdbcType="NUMERIC" property="takeProfitPrice" />
    <result column="take_profit_percentage" jdbcType="NUMERIC" property="takeProfitPercentage" />
    <result column="max_quantity" jdbcType="NUMERIC" property="maxQuantity" />
    <result column="pnl" jdbcType="NUMERIC" property="pnl" />
    <result column="ctime" jdbcType="TIMESTAMP" property="ctime" />
    <result column="mtime" jdbcType="TIMESTAMP" property="mtime" />
    <result column="uuid" jdbcType="VARCHAR" property="uuid" />
  </resultMap>

  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <select id="sumPnl" resultType="java.math.BigDecimal">

    select COALESCE(sum(a.pnl), 0) from trade_position a
    where a.uid = #{uid} and a.status='CLOSE'
    <if test="req.symbol != null">
      and a.symbol = #{req.symbol,jdbcType=VARCHAR}
    </if>
    <if test="req.direction != null">
      and a.direction = #{req.direction,jdbcType=VARCHAR}
    </if>
    <if test="req.startTime != null">
      and a.ctime <![CDATA[>=]]> TO_TIMESTAMP(#{req.startTime,jdbcType=BIGINT}/1000)
    </if>
    <if test="req.endTime != null">
      and a.ctime <![CDATA[<]]> TO_TIMESTAMP(#{req.endTime,jdbcType=BIGINT}/1000)
    </if>

  </select>

    <select id="selectTradeMarginOrderByAmpMarginReq"
            resultMap="com.google.backend.trading.dao.mapper.DefaultTradeMarginOrderMapper.BaseResultMap">
      select tmo.*
      <if test="req.positionId == null or req.positionId == '' ">
        from trade_margin_order tmo
      </if>
      <if test="req.positionId != null and req.positionId != ''">
        from (select distinct on (uid) * from trade_transaction where position_id = #{req.positionId}) tt
            left join trade_margin_order tmo on tt.order_id = tmo.uuid
      </if>
      <where>
        tmo.uid = #{req.uid}
        <if test="req.positionId != null and req.positionId != ''">
          and tt.pdt_status = 'COMPLETED'
        </if>
        <if test="req.activitiesId != '' and req.activitiesId != null">
          and tmo.uuid = #{req.activitiesId}
        </if>
        <if test="req.type != null and req.type != ''">
          and tmo.type = #{req.type}
        </if>
        <if test="req.strategy != null and req.strategy != ''">
          and tmo.strategy = #{req.strategy}
        </if>
        <if test="req.symbol != null and req.symbol != ''">
          and tmo.symbol = #{req.symbol}
        </if>
        <if test="req.direction != null and req.direction !=''">
          and tmo.direction = #{req.direction}
        </if>
        <if test="req.statusList != null ">
          and tmo.status in
           <foreach collection="req.statusList"  item="status" open="(" close=")" separator=",">
             #{status}
            </foreach>
        </if>
        <if test="req.startCtime != null and req.endCtime != null">
          and tmo.ctime between to_timestamp(#{req.startCtime}/1000) and to_timestamp(#{req.endCtime}/1000)
        </if>
        <if test="req.startMtime != null and req.endMtime != null">
          and tmo.mtime  between  to_timestamp( #{req.startMtime}/1000)  and to_timestamp( #{req.endMtime}/1000)
        </if>
      </where>
        order by case tmo.status
        when 'PRE_TRIGGER' then 1
        when 'PENDING' then 1
        when 'EXECUTING' then 3
        when 'LOCKED' then 3
        when 'COMPLETED' then 4
        when 'CANCELING' then 5
        when 'PART_CANCELED' then 6
        when 'CANCELED' then 7
        when 'EXCEPTION' then 8
        else 10 end asc, tmo.MTIME DESC, tmo.CTIME DESC
    </select>

    <update id="updatePnl">
    update trade_position set pnl = pnl + #{pnl}
    where uuid = #{positionId} and status = 'ACTIVE'
  </update>

  <update id="clearTakeProfitOrStopLoss">
    update trade_position set
    <choose>
      <when test="clearTakeProfit">
        take_profit_price = null, take_profit_percentage = 0
      </when>
      <otherwise>
        stop_loss_price = null, stop_loss_percentage = 0
      </otherwise>
    </choose>
    where id = #{positionId}
  </update>

  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update trade_position
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.symbol != null">
        symbol = #{record.symbol,jdbcType=VARCHAR},
      </if>
      <if test="record.direction != null">
        direction = #{record.direction,jdbcType=VARCHAR},
      </if>
      <if test="record.quantity != null">
        quantity = #{record.quantity,jdbcType=NUMERIC},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=NUMERIC},
      </if>
      <if test="record.autoSettle != null">
        auto_settle = #{record.autoSettle,jdbcType=BIT},
      </if>
      <choose>
        <when test="record.stopLossPrice lt 0">
          stop_loss_price = null,
        </when>
        <otherwise>
          stop_loss_price = #{record.stopLossPrice,jdbcType=NUMERIC},
        </otherwise>
      </choose>
      <if test="record.stopLossPercentage != null">
        stop_loss_percentage = #{record.stopLossPercentage,jdbcType=NUMERIC},
      </if>
      <choose>
        <when test="record.takeProfitPrice lt 0">
          take_profit_price = null,
        </when>
        <otherwise>
          take_profit_price = #{record.takeProfitPrice,jdbcType=NUMERIC},
        </otherwise>
      </choose>
      <if test="record.takeProfitPercentage != null">
        take_profit_percentage = #{record.takeProfitPercentage,jdbcType=NUMERIC},
      </if>
      <if test="record.maxQuantity != null">
        max_quantity = #{record.maxQuantity,jdbcType=NUMERIC},
      </if>
      <if test="record.pnl != null">
        pnl = #{record.pnl,jdbcType=NUMERIC},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mtime != null">
        mtime = #{record.mtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uuid != null">
        uuid = #{record.uuid,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>